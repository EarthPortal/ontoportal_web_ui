- @title = t("projects.title")

.browse-center
  .browse-container
    .projects-page-title
      .d-flex.justify-content-between.align-items-center
        .text= t("projects.title")
      .line
      .d-flex.justify-content-between.align-items-center.mt-2
        .page-description.mb-0
          = t("projects.page_description", portal: portal_name)
        - rest_url = $REST_URL.to_s.chomp("/")
        = render RoundedButtonComponent.new(link: "#{rest_url}/projects?apikey=#{get_apikey}", target: '_blank', size: 'medium', title: t('ontologies.go_to_api')) do |btn|
          - btn.icon_left do
            = inline_svg_tag "json.svg"

    :javascript
      const btn = document.getElementById("back_top_btn");
      window.addEventListener("scroll", function() {
        if (window.scrollY > 300) {
          btn.classList.add("show");
        } else {
          btn.classList.remove("show");
        }
      });

      btn.addEventListener("click", function(e) {
        e.preventDefault();
        window.scrollTo({
          top: 0,
          behavior: "smooth"
        });
      });

    %div{data: { controller: "turbo-frame history browse-filters" , "turbo-frame-url-value": "/projects/projects_filter?page=1&#{request.original_url.split('?').last}", action: "change->browse-filters#dispatchFilterEvent changed->history#updateURL changed->turbo-frame#updateFrame"}}
      .browse-sub-container
        .browse-first-row
          %div.pt-1
            - if session[:user].nil?
              = render Buttons::RegularButtonComponent.new(id: "add-project-button", value: t("projects.create_new_project"), variant: "secondary", state: "regular", href: "/login?redirect=/projects/new") do |btn|
                - btn.icon_left do
                  = inline_svg_tag "icons/plus.svg"
            - else
              = render Buttons::RegularButtonComponent.new(id: "add-project-button", value: t("projects.create_new_project"), variant: "secondary", state: "regular", href: new_project_path) do |btn|
                - btn.icon_left do
                  = inline_svg_tag "icons/plus.svg"
          %div{style:'margin-top: 30px'}
            %p.browse-filters-title= t("projects.filters")
            
            %div.browse-filter
              = switch_input(id:'filter-active', name:'active_only', label: t("projects.filter.show_active_only"))
              
            %div.browse-filter
              = switch_input(id:'filter-funded', name:'funded_only', label: t("projects.filter.show_funded_only"))
            

            - if @funder_options.present?
              %div{id: "funders_filter_container", data:{controller: "browse_filters"}}
                = dropdown_component(id: "browse-funders-filter", is_open: false) do |d|
                  - d.title { content_tag(:div, t('projects.filter.funder'), class: 'browse-filter-title-bar p-3') }
                  .radios{'data-action': 'change->browse-filters#dispatchFilterEvent', style: 'display: flex; flex-wrap: wrap; gap: 0.5rem; padding: 1rem;'}
                    - check_all = params[:funder].blank? || params[:funder] == ''
                    .funder-choice
                      = render Input::RadioChipComponent.new(label: t('projects.filter.all_funders'), name: 'funder', value: '', checked: check_all)
                    - @funder_options.each do |option|
                      - next if option[1] == '' # Skip the "All funders" option since we handle it above
                      - check_funder = params[:funder] == option[1]
                      .funder-choice
                        = render Input::RadioChipComponent.new(label: option[0], name: 'funder', value: option[1], checked: check_funder)

            %div{id: "categories_filter_container", data:{controller: "browse_filters show-filter-count", action: "change->show-filter-count#updateCount change->browse-filters#dispatchFilterEvent"}}
              - objects, checked_values, count = @categories_filters
              = dropdown_component(id: "browse-categories-filter", is_open: count.positive?) do |d|
                - d.title { browse_filter_section_header(key: t('projects.filter.categories'), count: count)}
                .browse-filter-checks-container.px-3
                  - objects.each do |category|
                    - category_count = @count_objects&.dig(:categories, category['id']) || 0
                    = render ChipsComponent.new(id: category['value'], name: 'categories', label: category['name'], value: category['value'], checked: checked_values.include?(category['value']), tooltip: category['name']) do |c|
                      - c.count do
                        %span{class: "badge ml-1 #{category_count == 0 ? 'text-muted' : 'badge-light'}"}= category_count
        .browse-second-row
          .browse-search-bar
            .browse-search-container
              %input{:name => "search", :placeholder => t("projects.search_projects"), :type => "text", :value => @search, data: {action: "input->browse-filters#dispatchInputEvent"}}
              .browse-search-filters.w-100
                %select#Sort_by.browse-sort-by-filter.custom-sort-select{name: "Sort_by", 'data-browse-filters-target': "sort"}
                  = options_for_select(@sorts_options, @sort_by)
          
          .browse-projects
            = render TurboFrameComponent.new(id: "projects_list_view-page-1", src: "/projects/projects_filter?page=1&#{request.original_url.split('?').last}", data:{"turbo-frame-target":"frame", "turbo-frame-url-value": "/projects/projects_filter"}) do |list|
              - list.loader do
                = browser_counter_loader
              
              -# Initial content that will be replaced by turbo frame
              = turbo_frame_tag "projects_list_view-page-1" do
                = render partial: 'projects_list', locals: { projects: @projects }
